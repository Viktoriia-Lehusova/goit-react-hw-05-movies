{"version":3,"file":"static/js/544.7928d09b.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","fetchAPI.js","pages/Home/Home.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 25px;\n  max-width: calc(100vw - 30px);\n\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const StyledItem = styled.li`\n  display: flex;\n  flex-wrap: wrap;\n\n  transition: color 350ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\nexport const StyledImg = styled.img`\n  width: 300px;\n  height: 400px;\n\n  border-radius: 10px;\n`;\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: #fdf0d5;\n\n  transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus,\n  &:hover {\n    border-radius: 10px;\n    transform: scale(1.04);\n    box-shadow: 1px 4px 34px -4px rgba(187, 208, 255, 1);\n  }\n`;\nexport const StyledSubtitle = styled.p`\n  width: 300px;\n  height: 30px;\n\n  font-size: 16px;\n  line-height: 1.71;\n  letter-spacing: 0.03em;\n`;\n","import { useLocation } from 'react-router-dom';\nimport {\n  StyledList,\n  StyledItem,\n  StyledImg,\n  StyledSubtitle,\n  StyledLink,\n} from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  const img_url = 'https://image.tmdb.org/t/p/w500';\n\n  return (\n    <StyledList>\n      {movies.map(({ id, title, name, poster_path }) => (\n        <StyledItem key={id}>\n          <StyledLink\n            id={`${id}`}\n            state={{ from: location }}\n            to={`/movies/${id}`}\n          >\n            <StyledImg src={img_url + poster_path} alt=\"\" />\n            <StyledSubtitle> {title ?? name}</StyledSubtitle>\n          </StyledLink>\n        </StyledItem>\n      ))}\n    </StyledList>\n  );\n};\n\nexport default MovieList;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0295bc0f580a974d57e0203ed698c033';\n\nexport const fetchTrendMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieByQuery = async searchQuery => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieCast = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { useEffect, useState } from 'react';\nimport MovieList from '../../components/MovieList/MovieList';\nimport { fetchTrendMovies } from '../../fetchAPI';\nimport { Loader } from '../../components/Loader/Loader';\nimport { StyledTitle, Box } from './Home.styled';\n\nconst Home = () => {\n  const [trendMovies, setTrendMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const movieTrending = async () => {\n      setLoading(true);\n      try {\n        const { results } = await fetchTrendMovies();\n        if (results.length === 0) {\n          setIsEmpty(true);\n        }\n        setTrendMovies(results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    movieTrending();\n  }, []);\n\n  return (\n    <div>\n      <StyledTitle>Trending today</StyledTitle>\n      {loading && <Box> {Loader()} </Box>}\n      <MovieList movies={trendMovies} />\n      {error && <h2>Something went wrong. Try again.</h2>}\n      {isEmpty && <h1> Sorry. There are no images ... </h1>}\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["StyledList","styled","StyledItem","StyledImg","StyledLink","Link","StyledSubtitle","movies","location","useLocation","map","id","title","name","poster_path","state","from","to","src","alt","BASE_URL","API_KEY","fetchTrendMovies","axios","data","console","log","fetchMovieByQuery","searchQuery","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","useState","trendMovies","setTrendMovies","loading","setLoading","isEmpty","setIsEmpty","error","setError","useEffect","movieTrending","results","length","message","Loader"],"sourceRoot":""}