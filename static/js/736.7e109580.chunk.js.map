{"version":3,"file":"static/js/736.7e109580.chunk.js","mappings":"8SAEaA,EAAaC,EAAAA,GAAAA,GAAH,wQAcVC,EAAaD,EAAAA,GAAAA,GAAH,4GAOVE,EAAYF,EAAAA,GAAAA,IAAH,qFAMTG,EAAcH,EAAAA,GAAAA,GAAH,mLAYXI,EAAiBJ,EAAAA,GAAAA,EAAH,qI,SCiB3B,EA7Ca,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KAsBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,6FAChBN,GAAW,GADK,mBAGSO,EAAAA,EAAAA,IAAeb,GAHxB,gBAIM,KADZG,EAHM,EAGNA,MACCW,QACPN,GAAW,GAEbJ,EAAQD,GAPM,kDASdO,EAAS,KAAMK,SATD,yBAWdT,GAAW,GAXG,6EAAH,qDAcfM,GACD,GAAE,CAACZ,KAGF,2BACGK,IAAW,UAAC,IAAD,gBAAOW,EAAAA,EAAAA,KAAP,QACZ,SAACtB,EAAD,UACGS,EAAKc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACR,UAACzB,EAAD,YACE,SAACC,EAAD,CAAWyB,IA1BL,kCA0BoBH,EAAcI,IAAI,MAC5C,SAACzB,EAAD,UAAcsB,KACd,SAACrB,EAAD,UAAiBsB,MAHFH,EADT,MAQXT,IAAS,6DACTF,IAAW,qEAGjB,C,mMCtDKiB,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,+GAELC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAHhB,uBAEpBG,EAFoB,EAEpBA,KAFoB,kBAKrBA,GALqB,gCAO5BC,QAAQC,IAAR,MAP4B,yDAAH,qDAWhBC,EAAiB,mCAAG,WAAMC,GAAN,kGAENL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,iCAC+CO,EAD/C,gCAFM,uBAErBJ,EAFqB,EAErBA,KAFqB,kBAKtBA,GALsB,gCAO7BC,QAAQC,IAAR,MAP6B,yDAAH,sDAUjBG,EAAiB,mCAAG,WAAMjC,GAAN,kGAEN2B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAxB,EADA,oBACmByB,EADnB,oBAFM,uBAErBG,EAFqB,EAErBA,KAFqB,kBAKtBA,GALsB,gCAO7BC,QAAQC,IAAR,MAP6B,yDAAH,sDAUjBjB,EAAc,mCAAG,WAAMb,GAAN,kGAEH2B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAxB,EADA,4BAC2ByB,EAD3B,oBAFG,uBAElBG,EAFkB,EAElBA,KAFkB,kBAKnBA,GALmB,gCAO1BC,QAAQC,IAAR,MAP0B,yDAAH,sDAUdI,EAAiB,mCAAG,WAAMlC,GAAN,kGAEN2B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAxB,EADA,4BAC2ByB,EAD3B,2BAFM,uBAErBG,EAFqB,EAErBA,KAFqB,kBAKtBA,GALsB,gCAO7BC,QAAQC,IAAR,MAP6B,yDAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","fetchAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 10px;\n  max-width: calc(100vw - 30px);\n\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const StyledItem = styled.li`\n  width: 180px;\n  height: 180px;\n\n  margin-right: 10px;\n  margin-bottom: 20px;\n`;\nexport const StyledImg = styled.img`\n  width: 120px;\n  height: 150px;\n\n  border-radius: 10px;\n`;\nexport const StyledTitle = styled.h2`\n  font-weight: 700;\n  font-size: 12px;\n  line-height: 1.16;\n  letter-spacing: 0.03em;\n\n  width: 100px;\n\n  margin-bottom: 5px;\n\n  color: #bbd0ff;\n`;\nexport const StyledSubtitle = styled.p`\n  width: 200px;\n\n  font-size: 12px;\n  line-height: 1.71;\n  letter-spacing: 0.03em;\n\n  color: #1e6091;\n`;\n","import { fetchMovieCast } from '../../fetchAPI';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../Loader/Loader';\nimport { Box } from '../../pages/Home/Home.styled';\nimport {\n  StyledList,\n  StyledItem,\n  StyledImg,\n  StyledTitle,\n  StyledSubtitle,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [error, setError] = useState(null);\n\n  const img_url = 'https://image.tmdb.org/t/p/w500';\n\n  useEffect(() => {\n    const movieCast = async () => {\n      setLoading(true);\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        if (cast.length === 0) {\n          setIsEmpty(true);\n        }\n        setCast(cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    movieCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Box> {Loader()} </Box>}\n      <StyledList>\n        {cast.map(({ id, profile_path, name, character }) => (\n          <StyledItem key={id}>\n            <StyledImg src={img_url + profile_path} alt=\"\" />\n            <StyledTitle>{name}</StyledTitle>\n            <StyledSubtitle>{character}</StyledSubtitle>\n          </StyledItem>\n        ))}\n      </StyledList>\n      {error && <h2>Something went wrong. Try again.</h2>}\n      {isEmpty && <h1> Sorry, we dont have this information.</h1>}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0295bc0f580a974d57e0203ed698c033';\n\nexport const fetchTrendMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieByQuery = async searchQuery => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieCast = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["StyledList","styled","StyledItem","StyledImg","StyledTitle","StyledSubtitle","movieId","useParams","useState","cast","setCast","loading","setLoading","isEmpty","setIsEmpty","error","setError","useEffect","movieCast","fetchMovieCast","length","message","Loader","map","id","profile_path","name","character","src","alt","BASE_URL","API_KEY","fetchTrendMovies","axios","data","console","log","fetchMovieByQuery","searchQuery","fetchMovieDetails","fetchMovieReviews"],"sourceRoot":""}