{"version":3,"file":"static/js/278.59696748.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.jsx","fetchAPI.js","pages/Movies/Movies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ id, title, name }) => (\n        <li key={id}>\n          <Link id={`${id}`} state={{ from: location }} to={`/movies/${id}`}>\n            {title ?? name}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0295bc0f580a974d57e0203ed698c033';\n\nexport const fetchTrendMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieByQuery = async searchQuery => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieCast = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMovieByQuery } from '../../fetchAPI';\nimport MovieList from '../../components/MovieList/MovieList';\nimport { Loader } from '../../components/Loader/Loader';\nimport Notiflix from 'notiflix';\n\nconst Movies = () => {\n  const [movieValue, setMovieValue] = useState('');\n  const [moviesByQuery, setMoviesByQuery] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (searchParams.get('searchQuery') === null) return;\n    const searchValue = searchParams.get('searchQuery');\n    setLoading(true);\n    async function MovieByValue() {\n      try {\n        const { results } = await fetchMovieByQuery(searchValue);\n        if (results.length === 0) {\n          setIsEmpty(true);\n        } else {\n          setIsEmpty(false);\n        }\n        setMoviesByQuery(results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    MovieByValue();\n  }, [searchParams]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (movieValue === '') {\n      return setSearchParams({});\n    }\n\n    setSearchParams({ searchQuery: movieValue });\n\n    if (movieValue.trim() === '') {\n      Notiflix.Notify.failure('Something went wrong.');\n      return;\n    }\n\n    setMovieValue('');\n    setMoviesByQuery([]);\n  };\n\n  const handleSearchValueChange = evt => {\n    setMovieValue(evt.target.value);\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"searchQuery\"\n          value={movieValue}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          onChange={handleSearchValueChange}\n        />\n        <button type=\"submit\"></button>\n      </form>\n\n      {moviesByQuery && <MovieList movies={moviesByQuery} />}\n      {loading && <div> {Loader()} </div>}\n\n      {error && <h2>Something went wrong. Try again.</h2>}\n      {isEmpty && <h1> Sorry. There are no movies by your query</h1>}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["movies","location","useLocation","map","id","title","name","state","from","to","BASE_URL","API_KEY","fetchTrendMovies","axios","data","console","log","fetchMovieByQuery","searchQuery","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","useState","movieValue","setMovieValue","moviesByQuery","setMoviesByQuery","useSearchParams","searchParams","setSearchParams","loading","setLoading","isEmpty","setIsEmpty","error","setError","useEffect","get","searchValue","MovieByValue","results","length","message","onSubmit","evt","preventDefault","trim","Notiflix","type","value","autoComplete","autoFocus","placeholder","onChange","target","Loader"],"sourceRoot":""}