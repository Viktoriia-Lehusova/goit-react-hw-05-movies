{"version":3,"file":"static/js/387.dfae7916.chunk.js","mappings":"4SAEaA,EAAaC,EAAAA,GAAAA,GAAH,0CAGVC,EAAaD,EAAAA,GAAAA,GAAH,4IASVE,EAAiBF,EAAAA,GAAAA,EAAH,kHAOdG,EAAcH,EAAAA,GAAAA,GAAH,uI,SCiCxB,EA1CgB,WACd,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,6FACnBN,GAAW,GADQ,mBAGSO,EAAAA,EAAAA,IAAkBb,GAH3B,gBAIM,KADfc,EAHS,EAGTA,SACIC,QACVP,GAAW,GAEbJ,EAAWU,GAPM,kDASjBJ,EAAS,KAAMM,SATE,yBAWjBV,GAAW,GAXM,6EAAH,qDAclBM,GACD,GAAE,CAACZ,KAGF,2BACGK,IAAW,UAAC,IAAD,gBAAOY,EAAAA,EAAAA,KAAP,QACZ,SAACtB,EAAD,UACGQ,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAACxB,EAAD,WACGuB,GACD,SAACtB,EAAD,UAAiBuB,MAFFF,EADN,MAOdV,IAAS,SAACV,EAAD,+CACTQ,IAAW,SAACR,EAAD,uCAGjB,C,mMClDKuB,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,+GAELC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAHhB,uBAEpBG,EAFoB,EAEpBA,KAFoB,kBAKrBA,GALqB,gCAO5BC,QAAQC,IAAR,MAP4B,yDAAH,qDAWhBC,EAAiB,mCAAG,WAAMC,GAAN,kGAENL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,iCAC+CO,EAD/C,gCAFM,uBAErBJ,EAFqB,EAErBA,KAFqB,kBAKtBA,GALsB,gCAO7BC,QAAQC,IAAR,MAP6B,yDAAH,sDAUjBG,EAAiB,mCAAG,WAAM/B,GAAN,kGAENyB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAtB,EADA,oBACmBuB,EADnB,oBAFM,uBAErBG,EAFqB,EAErBA,KAFqB,kBAKtBA,GALsB,gCAO7BC,QAAQC,IAAR,MAP6B,yDAAH,sDAUjBI,EAAc,mCAAG,WAAMhC,GAAN,kGAEHyB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAtB,EADA,4BAC2BuB,EAD3B,oBAFG,uBAElBG,EAFkB,EAElBA,KAFkB,kBAKnBA,GALmB,gCAO1BC,QAAQC,IAAR,MAP0B,yDAAH,sDAUdf,EAAiB,mCAAG,WAAMb,GAAN,kGAENyB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAtB,EADA,4BAC2BuB,EAD3B,2BAFM,uBAErBG,EAFqB,EAErBA,KAFqB,kBAKtBA,GALsB,gCAO7BC,QAAQC,IAAR,MAP6B,yDAAH,qD","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","fetchAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  width: 1200px;\n`;\nexport const StyledItem = styled.li`\n  margin-bottom: 20px;\n\n  font-size: 16px;\n  line-height: 1.71;\n  letter-spacing: 0.03em;\n\n  color: #bbd0ff;\n`;\nexport const StyledSubtitle = styled.p`\n  font-size: 14px;\n  line-height: 1.71;\n  letter-spacing: 0.03em;\n\n  color: #1e6091;\n`;\nexport const StyledTitle = styled.h2`\n  font-weight: 700;\n  font-size: 30px;\n  line-height: 1.16;\n  letter-spacing: 0.03em;\n\n  color: #c1121f;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from '../../fetchAPI';\nimport { Loader } from '../Loader/Loader';\nimport { Box } from '../../pages/Home/Home.styled';\nimport {\n  StyledList,\n  StyledItem,\n  StyledSubtitle,\n  StyledTitle,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const movieReviews = async () => {\n      setLoading(true);\n      try {\n        const { results } = await fetchMovieReviews(movieId);\n        if (results.length === 0) {\n          setIsEmpty(true);\n        }\n        setReviews(results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    movieReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Box> {Loader()} </Box>}\n      <StyledList>\n        {reviews.map(({ id, author, content }) => (\n          <StyledItem key={id}>\n            {author}\n            <StyledSubtitle>{content}</StyledSubtitle>\n          </StyledItem>\n        ))}\n      </StyledList>\n      {error && <StyledTitle>Something went wrong. Try again.</StyledTitle>}\n      {isEmpty && <StyledTitle> There are no reviews.</StyledTitle>}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0295bc0f580a974d57e0203ed698c033';\n\nexport const fetchTrendMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieByQuery = async searchQuery => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieCast = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["StyledList","styled","StyledItem","StyledSubtitle","StyledTitle","movieId","useParams","useState","reviews","setReviews","loading","setLoading","isEmpty","setIsEmpty","error","setError","useEffect","movieReviews","fetchMovieReviews","results","length","message","Loader","map","id","author","content","BASE_URL","API_KEY","fetchTrendMovies","axios","data","console","log","fetchMovieByQuery","searchQuery","fetchMovieDetails","fetchMovieCast"],"sourceRoot":""}