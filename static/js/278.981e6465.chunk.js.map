{"version":3,"file":"static/js/278.981e6465.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","fetchAPI.js","pages/Movies/Movies.jsx","pages/Movies/Movies.styled.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 25px;\n  max-width: calc(100vw - 30px);\n\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const StyledItem = styled.li`\n  display: flex;\n  flex-wrap: wrap;\n\n  transition: color 350ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\nexport const StyledImg = styled.img`\n  width: 300px;\n  height: 400px;\n\n  border-radius: 10px;\n`;\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: #fdf0d5;\n\n  transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus,\n  &:hover {\n    border-radius: 10px;\n    transform: scale(1.04);\n    box-shadow: 1px 4px 34px -4px rgba(187, 208, 255, 1);\n  }\n`;\nexport const StyledSubtitle = styled.p`\n  width: 300px;\n  height: 30px;\n\n  font-size: 16px;\n  line-height: 1.71;\n  letter-spacing: 0.03em;\n`;\n","import { useLocation } from 'react-router-dom';\nimport {\n  StyledList,\n  StyledItem,\n  StyledImg,\n  StyledSubtitle,\n  StyledLink,\n} from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  const img_url = 'https://image.tmdb.org/t/p/w500';\n\n  return (\n    <StyledList>\n      {movies.map(({ id, title, name, poster_path }) => (\n        <StyledItem key={id}>\n          <StyledLink\n            id={`${id}`}\n            state={{ from: location }}\n            to={`/movies/${id}`}\n          >\n            <StyledImg src={img_url + poster_path} alt=\"\" />\n            <StyledSubtitle> {title ?? name}</StyledSubtitle>\n          </StyledLink>\n        </StyledItem>\n      ))}\n    </StyledList>\n  );\n};\n\nexport default MovieList;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0295bc0f580a974d57e0203ed698c033';\n\nexport const fetchTrendMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieByQuery = async searchQuery => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieCast = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMovieByQuery } from '../../fetchAPI';\nimport MovieList from '../../components/MovieList/MovieList';\nimport { Loader } from '../../components/Loader/Loader';\nimport { CgSearch } from 'react-icons/cg';\nimport Notiflix from 'notiflix';\nimport {\n  StyledTitle,\n  StyledInput,\n  StyledForm,\n  StyledBtn,\n} from './Movies.styled';\nimport { Box } from '../Home/Home.styled';\n\nconst Movies = () => {\n  const [movieValue, setMovieValue] = useState('');\n  const [moviesByQuery, setMoviesByQuery] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (searchParams.get('searchQuery') === null) return;\n    const searchValue = searchParams.get('searchQuery');\n    setLoading(true);\n    async function MovieByValue() {\n      try {\n        const { results } = await fetchMovieByQuery(searchValue);\n        if (results.length === 0) {\n          setIsEmpty(true);\n        }\n        setMoviesByQuery(results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    MovieByValue();\n  }, [searchParams]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (movieValue === '') {\n      Notiflix.Notify.failure('Something went wrong.');\n      setSearchParams({});\n      return;\n    }\n\n    setSearchParams({ searchQuery: movieValue });\n\n    if (movieValue.trim() === '') {\n      Notiflix.Notify.failure('Something went wrong.');\n      return;\n    }\n\n    setMovieValue('');\n  };\n\n  const handleSearchValueChange = evt => {\n    setMovieValue(evt.target.value);\n  };\n\n  return (\n    <div>\n      <StyledForm onSubmit={handleSubmit}>\n        <StyledInput\n          type=\"text\"\n          name=\"searchQuery\"\n          value={movieValue}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          onChange={handleSearchValueChange}\n        />\n        <StyledBtn type=\"submit\">\n          <CgSearch />\n        </StyledBtn>\n      </StyledForm>\n\n      {moviesByQuery && <MovieList movies={moviesByQuery} />}\n      {loading && <Box> {Loader()} </Box>}\n\n      {error && <StyledTitle>Something went wrong. Try again.</StyledTitle>}\n      {isEmpty && (\n        <StyledTitle> Sorry. There are no movies by your query</StyledTitle>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n","import styled from 'styled-components';\n\nexport const StyledTitle = styled.h2`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  font-weight: 700;\n  font-size: 36px;\n  line-height: 1.16;\n  letter-spacing: 0.03em;\n\n  color: #c1121f;\n`;\nexport const StyledForm = styled.form`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nexport const StyledInput = styled.input`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 400px;\n  height: 30px;\n\n  font-size: 26px;\n  line-height: 1.16;\n  letter-spacing: 0.03em;\n`;\nexport const StyledBtn = styled.button`\n  width: 40px;\n  height: 36px;\n\n  svg {\n    width: 22px;\n    height: 22px;\n  }\n`;\n"],"names":["StyledList","styled","StyledItem","StyledImg","StyledLink","Link","StyledSubtitle","movies","location","useLocation","map","id","title","name","poster_path","state","from","to","src","alt","BASE_URL","API_KEY","fetchTrendMovies","axios","data","console","log","fetchMovieByQuery","searchQuery","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","useState","movieValue","setMovieValue","moviesByQuery","setMoviesByQuery","useSearchParams","searchParams","setSearchParams","loading","setLoading","isEmpty","setIsEmpty","error","setError","useEffect","get","searchValue","MovieByValue","results","length","message","onSubmit","evt","preventDefault","Notiflix","trim","type","value","autoComplete","autoFocus","placeholder","onChange","target","Loader","StyledTitle","StyledForm","StyledInput","StyledBtn"],"sourceRoot":""}